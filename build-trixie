#!/bin/bash
# fredx181, 2025-10-27, stripped down version of mklive-trixie
# supports only .conf files as an argument, e.g. ./build-trixie /path/to/myconfig.conf
# no dependency on yad (as this has no GUI), no dependency on files to download from the 'MakeLive' repository.  

# below uncommented will enable the snapshot repository, comment out to disable
export SNAPSHOT="deb http://snapshot.debian.org/archive/debian/20240823 trixie main"

export LD_LIBRARY_PATH=

if [ -z $(which gxmessage) ]; then
MESSAGE=xmessage
else
MESSAGE=gxmessage
fi

# Not running from terminal ?
tty -s;
if [ $? -ne 0 ]; then
msg=" Please run this program from terminal\n
./$(basename $0)
"
	$MESSAGE "`echo -e $msg`"
	exit 0
fi

if [ "`whoami`" != "root" ]; then
echo "This script should be run as root"
echo "Please run again, e.g. 'sudo ./$(basename $0) <config>', exiting now..."
sleep 3
exit
fi

echo -e "\e[0;36mChecking network connection...\033[0m"
# check network
 case "$(curl -k -s --retry-delay 3 --retry 3 --max-time 10 -I https://debiandog.github.io/MakeLive | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
  [23]) echo -e "\e[0;32mOK\033[0m" ;;
  *) echo -e "\e[0;33mThere seems to be no network connection.\nPress Ctrl+C to exit and run this script again after it has been fixed.\033[0m";
echo "But if you are absolutely sure that there is a network connection ..."
read -sp "   ... then press ENTER to continue"
 esac

########## FUNCIONS ##########

# This makes sure when the script is interrupted, that all mount 'binds' will unmount 
exitfn () {
    trap SIGINT              # Resore signal handling for SIGINT
echo -e "\e[0;36mUnmounting mount binds in chroot\033[0m"
#umount -l chroot/tmp
umount -l $LAUNCHDIR/trixie/chroot/proc 2> /dev/null
umount -l $LAUNCHDIR/trixie/chroot/sys 2> /dev/null
umount -l $LAUNCHDIR/trixie/chroot/dev/pts 2> /dev/null
umount -l $LAUNCHDIR/trixie/chroot/dev 2> /dev/null

[ ! -d $LAUNCHDIR/trixie/apt ] && mv -f $LAUNCHDIR/trixie/chroot/var/cache/apt $LAUNCHDIR/trixie/
rm -f $LAUNCHDIR/trixie/apt/archives/lock 2> /dev/null
   sleep 2
   if mountpoint -q $LAUNCHDIR/trixie/chroot/dev; then     # just in case check dev
   echo -e "\e[0;31mSomething went wrong, directory chroot cannot be removed\033[0m"
   echo -e "\e[0;31mMake sure it's not in use by some process and try again, exiting...\033[0m"
   sleep 2
   exit
   else
   rm -rf $LAUNCHDIR/trixie/chroot
   fi
exit
}
export -f exitfn

trap "exitfn" 1 2 3 15           # Set up SIGINT trap to call function 'exitfn'

# OK or FAILED
ok_or_failed () {
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"
}
export -f ok_or_failed

cr_build_info () {
# Create setup info list build_setup.txt
echo "Live system built on $(uname -m) for $ARCH on $(date)" > build_setup.txt
echo -e "Preinstalled on top of debootstrap build:\nlive-boot wget menu dialog apt-utils dbus ca-certificates apt-transport-https xserver-xorg-legacy\n" >> build_setup.txt
echo -e "Base Install:\n$BASE_INSTALL\n" >> build_setup.txt
echo -e "Base Dog Packages Install:\n$BASE_DOG_APPS_INSTALL\n" >> build_setup.txt
echo -e "Applications Install:\n$BASE_APPS_INSTALL\n" >> build_setup.txt
echo -e "Desktop Environment Packages:\n$DESK_APPS_INSTALL\n" >> build_setup.txt
echo -e "Firmware:\n$FIRMWARE\n" >> build_setup.txt
echo -e "Extra Dog Packages:\n$EXTRA_DOG_APPS_INSTALL\n" >> build_setup.txt
echo -e "Remove cpp=$REM_AUTO_INST" >> build_setup.txt

# Info architecture for build config
[ "$ARCH" = "i386" ] && INFO_i386="Config generated for $ARCH, FORCE32 is set to TRUE (this way it works also on 64 bit)"
##### Generate config from build #####
echo '# Configuration for mklive-trixie, generated for architecture: '$ARCH', modify as desired
# NOTE: Leave every commented (#) line commented as it is
### Start configuration
DE_CONFIG="'"$DE_CONFIG"'"
# Be careful with removing from this section (mostly essential)  
BASE_INSTALL="'"$BASE_INSTALL"'"

# Base Dog Packages, recommended to keep:
# yad gtkdialog obshutdown pup-volume-monitor peasywifi
BASE_DOG_APPS_INSTALL="'"$BASE_DOG_APPS_INSTALL"'"

BASE_APPS_INSTALL="'"$BASE_APPS_INSTALL"'"

DESK_APPS_INSTALL="'"$DESK_APPS_INSTALL"'"
  
FIRMWARE="'"$FIRMWARE"'"

EXTRA_DOG_APPS_INSTALL="'"$EXTRA_DOG_APPS_INSTALL"'"

REM_AUTO_INST="'"$REM_AUTO_INST"'"

# Force 32 bit on 64 bit OS (set to FALSE for 64-bit build on 64-bit OS)
# '$INFO_i386'
FORCE32="'"$FORCE32"'"
KEEPLOCALES="'"$KEEPLOCALES"'"
KEEPMANDOC="'"$KEEPMANDOC"'"
SYSTEMD="'"$SYSTEMD"'"
RUNXTERM="'"$RUNXTERM"'"
LBINITRD="'"$LBINITRD"'"
ISOUEFI="'"$ISOUEFI"'"
### End configuration

# A selection of firmware packages available (mostly for wireless):
# atmel-firmware firmware-realtek bluez-firmware firmware-atheros firmware-linux-free firmware-linux-nonfree firmware-netxen firmware-ti-connectivity firmware-b43legacy-installer firmware-iwlwifi firmware-ipw2x00 firmware-libertas firmware-brcm80211 firmware-b43-installer firmware-qlogic firmware-bnx2 firmware-misc-nonfree firmware-bnx2x firmware-zd1211 
# Some extra dog applications:
# debdoginstallscripts dogradio youtube-get2 youtube-viewer peasyfwmon gifondesktop upgrade-kernel conkyclock redshiftgui mpv peasymount peasyscale peasyxorburn peasyglue
# Choice of Desktop:
# Default is openbox with pcmanmfm providing the desktop, lxpanel, etc..
# To change, replace what is in the DESK_APPS_INSTALL field with for example:
# mate-core (for MATE), xfce4 (for XFCE), lxde (for LXDE)
# No guarantee that all work as expected, might require some fixing
# Remove automatically installed packages:
# During installing all the packages, some are installed that you might not need, e.g.
# cpp, REM_AUTO_INST=TRUE will uninstall it.
# (cpp dependencies then be autoremoved, but depending on your other package choices)
# To force 32 bit build on a 64 bit OS set FORCE32=TRUE' > build_setup.conf
}
export -f cr_build_info

########################## End functions #####################################

############# Start #############

export LAUNCHDIR="$PWD"

########### Options (configuration)  ###########
# ● fredx181, changed to only one arg needed (conf file)

helptext="build-trixie\n
usage: ./$(basename $0) <config_file>  (presets are in configs-trixie)\n
	-help show this help\n
	Example using one of the preset config files: \n
	./$(basename $0) configs-trixie/lxqt-full.conf \n
	Example with custom config file: \n
	./$(basename $0) /path/to/my.conf \n
"

params=$@
	
if [ ${#params} -eq 0 ]; then	# no options, so print info/help...
	echo -e $helptext
	exit
fi

arg=$1
		case $arg in
		-help|--help)
echo -e $helptext
exit
			;;
		*.conf) # ● fredx181, first arg needs to have .conf extension
config=$1
	. $config
	CONFIG="yes"
			;;

		*)
echo -e "\e[0;31mNot a valid option\033[0m"
echo -e $helptext
exit
			;;
		esac

# export final variables defined from custom .conf file
export BASE_INSTALL="$BASE_INSTALL"
export BASE_DOG_APPS_INSTALL="$BASE_DOG_APPS_INSTALL"
export BASE_APPS_INSTALL="$BASE_APPS_INSTALL"
export DESK_APPS_INSTALL="$DESK_APPS_INSTALL"
export FIRMWARE="$FIRMWARE"
export EXTRA_DOG_APPS_INSTALL="$EXTRA_DOG_APPS_INSTALL"
export REM_AUTO_INST="$REM_AUTO_INST"
export FORCE32="$FORCE32"
export KEEPLOCALES="$KEEPLOCALES"
export KEEPMANDOC="$KEEPMANDOC"
export SYSTEMD="$SYSTEMD"
export RUNXTERM="$RUNXTERM"
export LBINITRD="$LBINITRD"
export ISOUEFI="$ISOUEFI"

if [ "$(uname -m)" = "i686" ]; then
echo
echo -e "\e[0;32mOK, running 32-bit OS, building live system for 32-bit: $(uname -m)\033[0m"
export ARCH="i386"
export FORCE32="TRUE"
elif [ "$(uname -m)" = "x86_64" ]; then
echo
	if [ "$FORCE32" = "TRUE" ]; then
	echo -e "\e[0;32mOK, running 64-bit OS, building live system for 32-bit: i686\033[0m"
	export ARCH="i386"
	else
	echo -e "\e[0;32mOK, running 64-bit OS, building live system for 64-bit: $(uname -m)\033[0m"
	export ARCH="amd64"
	fi
fi
echo -e "\e[0;33mCreate a Debian trixie minimal live system similar to 'DebianDog'\nWith overlay support and porteus-boot style included\n\nIt's required to have at least 3 GB free space\nand to run this script on a Linux filesystem, e.g. ext4\033[0m"
echo -e "\e[0;32mBuilding will be done in: $PWD/trixie\033[0m"
if [ "$CONFIG" = "yes" ]; then
	if [ -z "$BASE_INSTALL" ]; then
	echo -e "\e[0;31mThis config file cannot be used, sorry, exiting...\033[0m"
	exit
	else
echo -e "\e[0;36mRunning with configuration: \e[1;29m$(readlink -f $config)\e[0;29m\033[0m"
	fi
else
echo -e "\e[0;36mNo custom config in use\033[0m"
echo -e "\e[0;36mUsing standard configuration defined on top of script\033[0m"
fi
echo -e "\e[0;33mBuild setup info can be found in: $PWD/trixie/build_setup.txt\033[0m"
echo -e "\e[0;32mIf you'd like a log from the output, run again e.g:\033[0m"
echo -e "\e[0;33m$0 myconfig.conf 2>&1 | tee build-trixie.log\033[0m"
echo -e "\e[0;36mFirst setting up debootstrap, this will take a few minutes\nAfter that you will be asked to set the password for 'root'\033[0m"
echo

echo -e "\e[0;36mChecking network connection...\033[0m"
# check network
 case "$(curl -k -s --retry-delay 3 --retry 3 --max-time 10 -I https://debiandog.github.io/MakeLive | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
  [23]) echo -e "\e[0;32mOK\033[0m" ;;
  *) echo -e "\e[0;33mThere seems to be no network connection.\nPress Ctrl+C to exit and run this script again after it has been fixed\033[0m";
echo "But if you are absolutely sure that there is a network connection ..."
read -sp "   ... then press ENTER to continue"
 esac

if [ -d "trixie" ]; then 
echo -e "\e[0;33m Working directory 'trixie' already exists \n To be able to continue, some contents need to be removed first ,\n except the apt cache in chroot\033[0m"
read -p "Are you sure to delete contents of directory trixie? (Enter=yes) (Y/n)?" choice

case "$choice" in 
  y|Y|"")

echo -e "\e[0;36mUnmount mount binds and remove trixie/chroot...\033[0m"
#umount -l chroot/tmp
umount -l trixie/chroot/proc 2> /dev/null
umount -l trixie/chroot/sys 2> /dev/null
umount -l trixie/chroot/dev/pts 2> /dev/null
umount -l trixie/chroot/dev 2> /dev/null

mv trixie/chroot/var/cache/apt trixie/ 2> /dev/null
   if mountpoint -q trixie/chroot/dev; then      # just in case check dev
   echo -e "\e[0;31mSomething went wrong, directory trixie/chroot cannot be removed\033[0m"
   echo -e "\e[0;31mMake sure it's not in use by some process and try again, exiting...\033[0m"
   sleep 2
   exit
   else
   rm -rf trixie/chroot
   fi
mkdir -p trixie/chroot/var/cache 2> /dev/null
mv trixie/apt trixie/chroot/var/cache/ 2> /dev/null
find trixie -mindepth 1 ! -wholename 'trixie/chroot/*' -delete 2> /dev/null  
echo -e "\e[0;32mOK, continue...\033[0m"
;;
  n|N)
echo "Exiting..."
sleep 3
exit 0
;;
*)
echo -e "\e[0;31mNot a valid choice, exiting....\033[0m"
sleep 3
exit 0
;;
esac
fi

if [ $RUNXTERM = TRUE ]; then
echo -e "\e[0;33mAt the end of the install process you may want to run one or more commands\n (in the chroot) \n Xterm will run and you can type e.g. synaptic, to install more packages\n Or e.g. rox or thunar (filemanager), if installed)\033[0m"
echo -e "\e[0;36mOK, as configured, will run xterm later, at the end of install process\033[0m"
fi

if [ $LBINITRD = TRUE ]; then
echo -e "\e[0;33mAt the end of the install process the initrd file(s) will be created\nThe  initrd1.xz for porteus-boot will be created anyway, but an initrd for 'live-boot' can be created also (initrd.img)\033[0m"
echo -e "\e[0;36mOK, will create initrd.img\033[0m"
else
echo -e "\e[0;36mOK, will not create initrd.img, only initrd1.xz\033[0m"
fi

if [ $ISOUEFI = TRUE ]; then
echo -e "\e[0;33mAt the end an ISO will be created\033[0m" 
echo -e "\e[0;36mOK, as configured, will create ISO with UEFI support\033[0m"
else
echo -e "\e[0;33mAt the end an ISO will be created\033[0m"
echo -e "\e[0;36mOK, as configured will create ISO without UEFI support\033[0m"
fi

sleep 3

if [ $(command -v apt-get 2>/dev/null) ];then
 echo -e "\e[0;36mUpdate the package lists...\033[0m"
 apt-get update
 echo -e "\e[0;36mInstall some required packages, e.g. xz-utils, wget, squashfs-tools, etc...\033[0m"
 apt-get install wget xz-utils squashfs-tools cpio xorriso isolinux gpgv -y
 ok_or_failed
fi

# install debootstrap deb
DEBOOTSTRAP=debootstrap_1.0.134_all.deb

dpkg -i "$DEBOOTSTRAP"

if [ -z `which debootstrap` ] || [ ! -e /usr/share/debootstrap/scripts/trixie ]; then
	msg=" You don't have debootstrap installed.\nIt's a dependency of this program.\n Please install it."
	echo $msg
	$MESSAGE "`echo -e $msg`"
exit 0
fi

if [ -z $(which dpkg) ] || [ -L $(which dpkg) ]; then
	msg=" You don't have the (full) package dpkg installed.\nIt's a dependency of this program.\n Please install it."
	echo $msg
	$MESSAGE "`echo -e $msg`"
exit 0
fi

########## Set up debootstrap ##########
echo -e "\e[0;36mSetting up debootstrap in trixie/chroot\033[0m"
echo -e "\e[0;36mThis may take a while...\033[0m"
mkdir -p trixie/chroot && cd trixie &&
debootstrap --arch=$ARCH --variant=minbase --include=apt-transport-https,ca-certificates,initscripts,adduser trixie chroot http://deb.debian.org/debian/
ret=$?
echo $ret
if [ $ret -ne 0 ]; then
echo -e "\e[0;31mFailed to install the base system\033[0m"
echo -e "\e[0;32mThis can happen sometimes, please try again, exiting now...\033[0m"
exit
fi

# create build_info.txt and build_setup.conf
cr_build_info

[ "$ISOUEFI" = "TRUE" ] && tar -zxf ../isodata-trixie-uefi.tar.gz || tar -zxf ../isodata-trixie.tar.gz
ok_or_failed

echo -e "\e[0;36mExtracting...\033[0m"
tar -zxf ../dog-boot-trixie-20240602.tar.gz
echo -e "\e[0;36mCopy scripts, required for porteus-boot, to the chroot...\033[0m"
cp -af dog-boot-trixie-20240602/* chroot/
ok_or_failed

tar -zxf ../initrdport-bullseye.tar.gz
echo -e "\e[0;36mCopy initrd skeleton, required for porteus-boot, to chroot/tmp ...\033[0m"
cp -af initrdport-bullseye chroot/tmp/  # copy initrd skeleton to chroot/tmp/
ok_or_failed

# mount bind some required directories from host filesystem
mount --bind /proc chroot/proc
#mount --bind /tmp chroot/tmp
mount --bind /dev chroot/dev
mount --bind /sys chroot/sys
mount -t devpts devpts chroot/dev/pts
# provide a network connection in chroot
echo -en "`cat /etc/resolv.conf`" > chroot/etc/resolv.conf

#################################################
############ Start running in chroot ############
#################################################
chroot_in () { 
if [ -z $(which apt-get) ]; then
echo -e "\e[0;31mSorry, apt-get not found, cannot continue\033[0m"
echo -e "\e[0;36mExiting . . .\033[0m"
touch /exit_
sleep 3
exit
fi 

export HOME=/root
export LC_ALL=C

# Google chrome for 64 bit only, so remove on i386
[ "$ARCH" = "i386" ] && rm -f /etc/apt/sources.list.d/google-chrome.list

# Setup install without install recommends
echo "APT::Install-Recommends "false"; APT::Install-Suggests "false";" > /etc/apt/apt.conf
echo "Acquire::Check-Valid-Until "0";" >> /etc/apt/apt.conf
echo "APT::Get::Allow-Downgrades "true";" >> /etc/apt/apt.conf

# systemd or not
if [ "$SYSTEMD" = "FALSE" ]; then  # no systemd, add devuan repo
export DEVUANREPO="deb http://pkgmaster.devuan.org/devuan/ excalibur main contrib non-free"
echo 'Package: *
Pin: release n=excalibur
Pin-Priority: 1000

Package: slim
Pin: version 1:1.4.1-1devuan1
Pin-Priority: 1001

' > /etc/apt/preferences.d/99devuan

elif [ "$SYSTEMD" = "TRUE" ]; then
DEVUANREPO=""  # with systemd, no devuan repo added
fi

# repos for 64-bit
export REPOS64='deb [signed-by=/etc/apt/trusted.gpg.d/debdog.gpg] https://fred181.gitlab.io/trixie/amd64/ ./
## package repositories
deb http://deb.debian.org/debian trixie main contrib non-free non-free-firmware
#deb-src http://deb.debian.org/debian trixie main contrib non-free

'$DEVUANREPO'

#deb http://deb.debian.org/debian trixie-updates main contrib non-free
#deb-src http://deb.debian.org/debian trixie-updates main contrib non-free

#deb http://deb.debian.org/debian trixie-proposed-updates main contrib non-free
#deb-src http://deb.debian.org/debian trixie-proposed-updates main contrib non-free

#deb http://security.debian.org trixie-security main contrib non-free
#deb-src http://security.debian.org trixie-security main contrib non-free

'$SNAPSHOT'

'

# repos for 32-bit
export REPOS32='deb [signed-by=/etc/apt/trusted.gpg.d/debdog.gpg] https://fred181.gitlab.io/trixie/i386/ ./
## package repositories
deb http://deb.debian.org/debian trixie main contrib non-free non-free-firmware
#deb-src http://deb.debian.org/debian trixie main contrib non-free

'$DEVUANREPO'

#deb http://deb.debian.org/debian trixie-updates main contrib non-free
#deb-src http://deb.debian.org/debian trixie-updates main contrib non-free

#deb http://deb.debian.org/debian trixie-proposed-updates main contrib non-free
#deb-src http://deb.debian.org/debian trixie-proposed-updates main contrib non-free

#deb http://security.debian.org trixie-security main contrib non-free
#deb-src http://security.debian.org trixie-security main contrib non-free

'$SNAPSHOT'

'

[ "$ARCH" = "i386" ] && echo "$REPOS32" > /etc/apt/sources.list

[ "$ARCH" = "amd64" ] && echo "$REPOS64" > /etc/apt/sources.list 


apt-get update # required, repositories just added
[ $? -ne 0 ] && apt-get update # try again if failed

echo -e "\e[0;36mPlease set the password for 'root'\033[0m"
echo -e "\e[0;33mAlso now you may want to add to or edit files in trixie/chroot\033[0m" 
passwd root
if [ $? -ne 0 ]; then # try again if passwords not match
echo -e "\e[0;36mPlease try again, type password for root\033[0m"
passwd root
fi
[ $? -ne 0 ] && echo -e "\e[0;31mWarning: password is not set\033[0m"; sleep 3

# create user puppy
echo -e "\e[0;36mAdd user 'puppy'...\033[0m"
adduser puppy --gecos ",,," --disabled-password 2> /dev/null
echo
echo -e "\e[0;36mPlease set the password for user 'puppy'\033[0m"
passwd puppy
if [ $? -ne 0 ]; then # try again if passwords not match
echo -e "\e[0;36mPlease try again, type password for puppy\033[0m"
passwd puppy
fi
[ $? -ne 0 ] && echo -e "\e[0;31mWarning: password is not set\033[0m"; sleep 3
echo
# add groups fuse and wheel
addgroup fuse
addgroup wheel
echo
usermod -a -G sudo,cdrom,disk,audio,video,plugdev,fuse,wheel puppy

# make sure that the dialog for keyboard-configuration shows up
echo 'debconf debconf/frontend select Dialog' | debconf-set-selections
apt-get install whiptail --yes

# configure keyboard first
if [ "$SYSTEMD" = "FALSE" ]; then
echo -e "\e[0;36mInstall keyboard-configuration and more required packages\033[0m"
apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" keyboard-configuration initscripts sysvinit-core xz-utils cryptsetup cryptsetup-bin gnupg dirmngr apt-utils wget devuan-keyring elogind libelogind0 libpam-elogind libelogind-compat udev --yes

else
rm -f /etc/apt/preferences.d/00systemd
echo -e "\e[0;36mInstall keyboard-configuration and more required packages\033[0m"
apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" keyboard-configuration xz-utils cryptsetup cryptsetup-bin gnupg dirmngr apt-utils wget systemd systemd-sysv libpam-systemd udev --yes
fi

# commented out all below as the google signing key is nowadays automatically added
#if [ "$ARCH" = "amd64" ]; then
# Add google signing key
#wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
#wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | tee /etc/apt/trusted.gpg.d/google.asc >/dev/null
#apt-get update # required, google repository key just added
#[ $? -ne 0 ] && apt-get update # try again
#fi

# Merge all install variables into one
INSTALL="$BASE_INSTALL $BASE_APPS_INSTALL $DESK_APPS_INSTALL $BASE_DOG_APPS_INSTALL $EXTRA_DOG_APPS_INSTALL $FIRMWARE"

if [ "$SYSTEMD" = "TRUE" ]; then  # if running with systemd, exclude sysvinit-core
INSTALL="$(echo "$INSTALL" | sed "s|sysvinit-core||g")"
fi

# check gnome-mplayer version
if [ "$(echo "$INSTALL" | grep gnome-mplayer)" ]; then
G_MPLAYER=$(echo "$INSTALL" | tr ' ' '\n' | grep "gnome-mplayer")
[ "$ARCH" = "i386" ] && INSTALL="$(echo "$INSTALL" | sed "s/$G_MPLAYER/gnome-mplayer-1.0.7/g")"
[ "$ARCH" = "amd64" ] && INSTALL="$(echo "$INSTALL" | sed "s/$G_MPLAYER/gnome-mplayer-1.0.6/g")"
fi

if [ "$(echo "$INSTALL" | grep network-manager)" ]; then
INSTALL="$INSTALL wpasupplicant"  # better install wpasupplicant too
fi

# simulate install first to check for errors, if there are, exit
echo -e "\e[0;36mChecking packages . . .\033[0m"
sleep 3
apt-get install -s -y $INSTALL
ret=$?
if [ $ret -eq 100 ]; then
echo -e "\e[0;31mSorry, there are one or more errors, see above.\033[0m"
echo -e "\e[0;31mCould be a typo in a package name.\033[0m"
echo -e "\e[0;32mContinue now, install and use aptitude to install from the package list ...\033[0m"
echo -e "\e[0;32mSo you can try to resolve e.g. conflicts, dependency issues\033[0m"
sleep 5
apt-get install aptitude --yes
APTITUDE=yes
#touch /exit_
#exit
else
echo -e "\e[0;32mAll packages checked OK, continue now to install some basic packages... \033[0m"
sleep 3
fi

# Install some basic packages (do not edit, essential!)
apt-get install dialog live-boot cryptsetup-initramfs menu dbus xserver-xorg-legacy --yes
# try again if failed
if [ $? -ne 0 ]; then
apt-get install live-boot cryptsetup-initramfs menu dbus xserver-xorg-legacy --yes
	if [ $? -ne 0 ]; then
	echo -e "\e[0;31mFAILED\033[0m"
	touch /exit_
	exit
	fi
fi

dbus-uuidgen > /var/lib/dbus/machine-id
echo "live" > /etc/hostname
echo "127.0.0.1	 localhost" > /etc/hosts
echo "127.0.1.1	 live" >> /etc/hosts
mkdir /live
mkdir -p /opt/bin

update-rc.d snapexit defaults

# ● fredx181, instead of below here it can be also: "cd /bin; ln -sf bash sh; cd /" 
# make /bin/sh symlink to bash instead of dash:
echo -e "\e[0;36mmake /bin/sh symlink to bash instead of default dash\033[0m"
echo "dash dash/sh boolean false" | debconf-set-selections
DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash


############ Start installing packages ############

####### Start installing packages, defined on GUI #######
echo -e "\e[0;36mInstall packages, as defined in configuration\033[0m"

sleep 3
# If one of the variables is empty, it will be skipped

### Do the real installing
#apt-get install -y $INSTALL
[ "$APTITUDE" = "yes" ] && aptitude install $INSTALL || apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y $INSTALL
# try again if failed
if [ $? -ne 0 ]; then
#apt-get install -y $INSTALL
  if [ "$APTITUDE" = "" ]; then
apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y $INSTALL
	if [ $? -ne 0 ]; then
	echo -e "\e[0;31mFAILED\033[0m"
	touch /exit_
	exit
	fi
  else
echo -e "\e[0;31mFAILED\033[0m"
touch /exit_
exit
  fi
fi

# in case udev installed, replace with eudev
if [ "$SYSTEMD" = "FALSE" ]; then
apt-get install -y eudev porteusbootscripts
else
apt-get install -y porteusbootscripts
fi

### install the kernel
echo -e "\e[0;36mInstall the kernel, download and extract\033[0m"
mkdir -p /tmp/tmpapt
[ "$ARCH" = "i386" ] && apt-get -o dir::cache::archives="/tmp/tmpapt" install -d linux-image-686-pae -y
[ "$ARCH" = "amd64" ] && apt-get -o dir::cache::archives="/tmp/tmpapt" install -d linux-image-amd64 -y

L_IMG=$(ls -S /tmp/tmpapt | head -1)
dpkg-deb -x /tmp/tmpapt/$L_IMG /tmp/tmpapt
kernel=$(ls /tmp/tmpapt/lib/modules/ 2> /dev/null)  # try lib/modules first
if [ -n "$kernel" ]; then
cp -a /tmp/tmpapt/lib/modules /lib/
else
kernel=$(ls /tmp/tmpapt/usr/lib/modules/)  # kernel in usr/lib/modules
cp -a /tmp/tmpapt/usr/lib/modules /lib/
fi
cp -a /tmp/tmpapt/boot/config-* /boot/
depmod $kernel

############ End of installing packages ############

mkdir -p /etc/systemd/network 2> /dev/null   # might not exist
ln -s /dev/null /etc/systemd/network/99-default.link # traditional network interface names

### Uninstall gnome-icon-theme
GNOME_ICON=$(apt-cache rdepends --installed gnome-icon-theme | grep -v "gnome-icon-theme\|Reverse Depends" | grep -v "|")  # check for reverse dependencies, remove only if none
[ -z "$GNOME_ICON" ] && apt-get purge --yes gnome-icon-theme    # in case installed

# if "xserver-xorg-input-evdev" is installed:
# apt-get purge --yes  xserver-xorg-input-libinput # uncomment if lxinput doesn't work
apt-get --yes autoremove
#####################################
mv -f /usr/local/XTerm /etc/X11/app-defaults/

. /etc/cryptsetup-initramfs/conf-hook
if [ "$CRYPTSETUP" = "" ]; then
echo "CRYPTSETUP=y" >> /etc/cryptsetup-initramfs/conf-hook
fi
echo

if [ $LBINITRD = TRUE ]; then
echo -e "\e[0;36mGenerate initrd.img . . .\033[0m"
mkinitramfs -c xz -k -o /tmp/tmpapt/boot/initrd.img  $kernel
else
echo -e "\e[0;36mAs chosen, not creating initrd.img, only initrd1.xz\033[0m"
fi
echo -e "\e[0;36mGenerating porteus-boot initrd1.xz . . .\033[0m"
/usr/local/mkinitrd $kernel
cd /

if [ "$RUNXTERM" = "TRUE" ]; then
echo -e "\e[0;36mAs requested, running Xterm now\nDo not forget to close Xterm and all other windows, when done\033[0m"
xterm
fi

if [ "$KEEPLOCALES" = "FALSE" ]; then
rm -fr usr/share/locale/*
else
echo -e "\e[0;36mAs requested, keep locale files and configure default locale\033[0m"
apt install locales -y
dpkg-reconfigure locales
fi

echo "Cleaning..."
rm -f var/lib/alsa/asound.state
rm -f root/.bash_history
rm -f root/.xsession-errors
rm -rf root/.cache
rm -rf root/.thumbnails
rm -f etc/blkid-cache
rm -f var/lib/dhcp/dhclient.eth0.leases
rm -f var/lib/dhcpcd/*.lease
rm -rf lib/consolefonts
rm -rf lib/keymaps
rm -fr var/lib/aptitude/* 2> /dev/null
ls var/lib/apt/lists | grep -v "lock" | grep -v "partial" | xargs -i rm -r var/lib/apt/lists/{} ;
rm -f var/cache/debconf/*-old
rm -f var/lib/dpkg/*-old

if [ "$KEEPMANDOC" = "FALSE" ]; then
find /usr/share/doc -type f -exec rm -f {} 2> /dev/null \;
find usr/share/man -type f -exec rm -f {} 2> /dev/null \;
find usr/share/gtk-doc -type f -exec rm -f {} 2> /dev/null \;
find usr/share/info -type f -exec rm -f {} 2> /dev/null \;
    chown -R man:root usr/share/man
fi
rm -f /usr/local/mkinitrd # remove temp. mkinitrd
rm -f vmlinuz* initrd* 2> /dev/null # remove symlinks on /
#[ "$KEEP_LOCALES" = "no" ] && rm -fr usr/share/locale/*

rm -f /var/lib/dbus/machine-id
#apt-get clean
#rm -rf /tmp/*
rm /etc/resolv.conf
touch /etc/resolv.conf
}
export -f chroot_in

if [ "$(which chroot)" = "/bin/chroot" ]; then
CHROOT="/usr/sbin/chroot"
else
CHROOT="chroot"
fi

$CHROOT chroot /bin/bash -c chroot_in

# do not continue if there were errors
[ -f "chroot/exit_" ] && exitfn

################################################
############ End running in chroot #############
################################################

sleep 2
cd "$LAUNCHDIR/trixie/"
echo -e "\e[0;36mUnmounting mount binds in chroot\033[0m"
#umount -l chroot/tmp
umount -l chroot/proc
umount -l chroot/dev/pts
umount -l chroot/dev
umount -l chroot/sys
sleep 4
if mountpoint -q "$LAUNCHDIR/trixie/chroot/proc"; then
umount -l chroot/proc 2> /dev/null # try unmounting proc again if failed earlier (may happen on EasyOs)
  if [ $? -ne 0 ]; then # exit if failed unmounting proc
  echo -e "\e[0;31mFailed unmounting all mount binds, exiting ...\033[0m"
  exitfn
  fi
fi

rm -f isodata/live/01-filesystem.squashfs # just in case it exists remove first

# copy build_setup.txt to chroot/root
cp -a build_setup.txt chroot/root/
rm -f chroot/var/cache/apt/*.bin
mkdir -p apt/archives
mv -f chroot/var/cache/apt/archives/*.deb ./apt/archives/

if [ "$(cat chroot/etc/X11/default-display-manager 2> /dev/null)" ]; then
echo -e "\e[0;36mIt looks like you have a display-manager installed\033[0m"
cat chroot/etc/X11/default-display-manager
echo -e "\e[0;36mThis probably will conflict with the default login method (through /etc/inittab)\033[0m"
cp -af chroot/etc/inittab-noauto chroot/etc/inittab
if [ "$SYSTEMD" = "TRUE" ]; then
rm -f chroot/etc/systemd/system/graphical.target.wants/getty@tty1.service
rm -f chroot/etc/systemd/system/getty.target.wants/getty@tty1.service
fi
echo -e "\e[0;32mDisabled autologin, using display-manager for login\033[0m"
sleep 3
fi

rm -fr chroot/var/tmp/*
[ $LBINITRD = TRUE ] && mv -f  chroot/tmp/tmpapt/boot/initrd.img isodata/live/
mv -f  chroot/tmp/initrd1.xz isodata/live/
mv -f chroot/tmp/tmpapt/boot/vmlinuz-* isodata/live/vmlinuz1
kernel=$(ls chroot/lib/modules/)

mkdir -p $kernel/usr/lib/modules
mkdir -p $kernel/boot

mv chroot/lib/modules/* $kernel/usr/lib/modules/
mv chroot/tmp/tmpapt/boot/config-* $kernel/boot/
rm -fr chroot/tmp/*
echo

# Extract extra squashfs modules if DE config is set
echo -e "\e[0;36mIf configured, extract extra .squashfs modules...\033[0m"

[ "$DE_CONFIG" = "Xfce4" ] && unsquashfs -f -d chroot ../modules-trixie/xfce4//*.squashfs 
[ "$DE_CONFIG" = "Jwm" ] && unsquashfs -f -d chroot ../modules-trixie/jwm/*.squashfs
[ "$DE_CONFIG" = "Mate" ] && unsquashfs -f -d chroot ../modules-trixie/mate/*.squashfs
[ "$DE_CONFIG" = "Lxqt" ] && unsquashfs -f -d chroot ../modules-trixie/lxqt/*.squashfs
[ "$DE_CONFIG" = "Lxqt_Full" ] && unsquashfs -f -d chroot ../modules-trixie/lxqt/*.squashfs
[ "$DE_CONFIG" = "DDog" ] && unsquashfs -f -d chroot ../modules-trixie/ddog/*.squashfs
[ "$DE_CONFIG" = "ObDog" ] && unsquashfs -f -d chroot ../modules-trixie/obdog/*.squashfs
[ "$DE_CONFIG" = "ChromeDog" ] && unsquashfs -f -d chroot ../modules-trixie/chromedog/*.squashfs
[ "$DE_CONFIG" = "Tint2" ] && unsquashfs -f -d chroot ../modules-trixie/tint2/*.squashfs

export nmu=""  # no-merged-usr not supported anymore post-bookworm

# Allow the user to makes changes in chroot just before creating filesystem.squashfs 
echo "At this point you may want to add/edit files in chroot folder"
echo "Also you can add .squashfs modules in the isodata/live folder, to be included in the ISO"
read -sp "Press ENTER to continue . . . "
echo
echo -e "\e[0;33mNow we will create compressed kernel: k-$kernel.squashfs and filesystem: '01-filesystem.squashfs'\nPlease enter your choice, xz compression will give smaller size than gzip,\033[0m"
echo -e "\e[0;33mbut xz takes much longer time to compress\033[0m"
read -p "Type gzip or xz : " choice

case "$choice" in 
  gzip)
echo -e "\e[0;36mCreating kernel .squashfs isodata/live/k-$kernel${nmu}.squashfs . . .\033[0m"
mksquashfs $kernel isodata/live/k-$kernel${nmu}.squashfs
echo -e "\e[0;36mCreating isodata/live/01-filesystem.squashfs...\033[0m"
mksquashfs chroot isodata/live/01-filesystem.squashfs
;;
  xz)
echo -e "\e[0;36mCreating kernel .squashfs isodata/live/k-$kernel${nmu}.squashfs . . .\033[0m"
mksquashfs $kernel isodata/live/k-$kernel${nmu}.squashfs -comp xz -b 512k -Xbcj x86
echo -e "\e[0;36mCreating isodata/live/01-filesystem.squashfs...\033[0m"
mksquashfs chroot isodata/live/01-filesystem.squashfs -comp xz -b 512k -Xbcj x86
;;
*)
echo -e "\e[0;31mNot a valid choice, please try again, type: gzip or xz \033[0m"
sleep 1
TRYAGAIN=yes
;;
esac

if [ "$TRYAGAIN" = "yes" ]; then
### Second chance in case having made a typo
read -p "Type gzip or xz : " choice

case "$choice" in 
  gzip)
echo -e "\e[0;36mCreating kernel .squashfs isodata/live/k-$kernel${nmu}.squashfs . . .\033[0m"
mksquashfs $kernel isodata/live/k-$kernel${nmu}.squashfs
echo -e "\e[0;36mCreating isodata/live/01-filesystem.squashfs...\033[0m"
mksquashfs chroot isodata/live/01-filesystem.squashfs
;;
  xz)
echo -e "\e[0;36mCreating kernel .squashfs isodata/live/k-$kernel${nmu}.squashfs . . .\033[0m"
mksquashfs $kernel isodata/live/k-$kernel${nmu}.squashfs -comp xz -b 512k -Xbcj x86
echo -e "\e[0;36mCreating isodata/live/01-filesystem.squashfs...\033[0m"
mksquashfs chroot isodata/live/01-filesystem.squashfs -comp xz -b 512k -Xbcj x86
;;
*)
echo -e "\e[0;31mNot a valid choice, exiting now... \033[0m"
sleep 1

exit 0
;;
esac
fi
ok_or_failed

rm -fr $kernel

echo

# Move back the cache to chroot
mv -f ./apt/archives/*.deb chroot/var/cache/apt/archives/ 2> /dev/null
rm -rf apt 2> /dev/null

echo -e "\e[0;36mFinally creating ISO...\033[0m"

if [ "$ISOUEFI" = "TRUE" ]; then
xorriso -dev DebLive_trixie-$ARCH-UEFI.iso \
-compliance "iso_9660_level=3:iso_9660_1999" \
-map isodata / \
-boot_image isolinux dir=/isolinux  \
-boot_image isolinux system_area=/usr/lib/ISOLINUX/isohdpfx.bin \
-boot_image isolinux partition_table=on \
-boot_image isolinux next \
-boot_image any efi_path=efiboot.img \
-boot_image isolinux partition_entry=gpt_basdat
ok_or_failed
echo
echo -e "\e[0;32mFinished! If all went well, trixie/DebLive_trixie-$ARCH-UEFI.iso has been created. \nAlso the required files for a frugal install are in trixie/isodata 'live' folder \n\nHave a good day!\033[0m"
else

NEWISO=$PWD/isodata
LABEL=deblive
NAME=../DebLive_trixie-$ARCH.iso

cd "$NEWISO"

xorriso -as mkisofs -r -J -joliet-long -l -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin -partition_offset 16 -V "$LABEL" -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o ${NAME} "$NEWISO"
ok_or_failed
echo
echo -e "\e[0;32mFinished! If all went well, trixie/DebLive_trixie-$ARCH.iso has been created. \nAlso the required files for a frugal install are in trixie/isodata 'live' folder \n\nHave a good day!\033[0m"
cd ..
echo
fi

# read -s -n 1 -p "Press any key to close . . ."

exit 0

